<Window x:Class="WindowsFileManager.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WindowsFileManager"
        mc:Ignorable="d"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="60"/>
        </Grid.RowDefinitions>
        
        <ListView x:Name="listView" HorizontalAlignment="Stretch" Height="Auto" Margin="10,10,10,10" VerticalAlignment="Stretch" Width="auto" Grid.Row="0" ItemsSource="{Binding ViewData}">
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="Name" Width="120" DisplayMemberBinding="{Binding Name}"></GridViewColumn>
                    <GridViewColumn Header="Type" Width="120" DisplayMemberBinding="{Binding Type}"></GridViewColumn>
                    <GridViewColumn Header="Size" Width="120" DisplayMemberBinding="{Binding Size}"></GridViewColumn>
                    <GridViewColumn Header="Last Modify Time" Width="120" DisplayMemberBinding="{Binding LastModificationDate}"></GridViewColumn>
                </GridView>
            </ListView.View>
        </ListView>

        <!-- 
            StackPanel - это просто такой контейнер, куда можно складывать другие контролы. Он будет сам по себе адаптироваться под то количество контролов, которое ты положишь в него
            Заметь, я добавил еще одну строку в главный грид, и стек панель пошла во вторую строку, так что нижняя строка занимает 30 пикселей, а верхняя (со списком) - все оставшееся место (звездочка)
        -->
        <StackPanel Grid.Row="1">
            <!-- 
                Это простая кнопка. Умеет нажиматься, блокироваться и показывать всякое в себе. Теоретически в свойство Контент можно запихнуть даже видео, 
                но на практике там обычно текст и иногда картинка.
                Команда OnReadDataCommand - это обработчик нажатия кнопки, но сделан не напрямую а через Биндинг, то есть снова логика нажатия кнопки не привязана жестко к самой кнопке 
                сама команда должна быть во ViewModel, там же, где и биндинги данных (FileDirViewModel.cs). Идем смотреть вью модель!
            -->
            <Button Content="Кнопка по которой надо вычитывать данные" Margin="10,0,10,0" Command="{Binding OnReadDataCommand}" />
            <Button Content="Кнопка по которой надо все чистить" Margin="10,10,10,0" Command="{Binding OnCleanDataCommand}" />
        </StackPanel>
    </Grid>
</Window>
