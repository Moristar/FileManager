<Window x:Class="WindowsFileManager.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WindowsFileManager"
        mc:Ignorable="d"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="60"/>
        </Grid.RowDefinitions>
        
        <ListView x:Name="listView" HorizontalAlignment="Stretch" Height="Auto" Margin="10,10,10,10" VerticalAlignment="Stretch" Width="auto" Grid.Row="0" ItemsSource="{Binding ViewData}">
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="Name" Width="120" DisplayMemberBinding="{Binding Name}"></GridViewColumn>
                    <GridViewColumn Header="Type" Width="120" DisplayMemberBinding="{Binding Type}"></GridViewColumn>
                    <GridViewColumn Header="Size" Width="120" DisplayMemberBinding="{Binding Size}"></GridViewColumn>
                    <GridViewColumn Header="Last Modify Time" Width="120" DisplayMemberBinding="{Binding LastModificationDate}"></GridViewColumn>
                </GridView>
            </ListView.View>
            <!--
                22.01.2016
                Один из недостатков WPF в том, что он настолько гибкий, что иногда, чтобы сделать что-то простое, надо нехило заморочиться. Зато это можно сделать миллионом способов.
                Вот один из способов, как прикрутить двойной щелчок на элемент списка. Вкратце - каждый элемент списка - это тоже маленький контрол (в нашем случае textbox или lable.
                Но мы этого как бы не знаем, мы работаем со "стилем", под которым подразумвается некоторый набор характеристик элемента управления (на самом деле это как CSS-style 
                в HTML, XAML (тот язык на котором описываются интерфейсы в WPF) вообще по сути аналог HTML только чуть попродвинутей).
                Ниже я добираюсь до "стиля", который изпользуется внутри лист вью на отдельных айтемах списка (ListViewItem). Далее я переопределяю стандартный стиль, добавляя 
                ивент сеттер (то есть назначая обработчик события в этом конкретном стиле). Теперь всякий раз как в этом списке сделают двойной щелчок мышкой - форма получит уведомление и 
                метод ListViewItem_MouseDoubleClick будет вызван. Данные изменения касаются только конкретно этого лист вью, но в принципе можно было бы переопределить не конкретный
                стиль, как сделано тут, а глобальный стиль для всего приложения.
                Чтобы перейти в code-behind класс нашей формы и увидеть как реализован вызов обработчика события двойного щелчка, нажми F7 прямо тут.
            -->
            <ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem">
                    <EventSetter Event="MouseDoubleClick" Handler="ListViewItem_MouseDoubleClick " />
                </Style>
            </ListView.ItemContainerStyle>
        </ListView>

        <!-- 
            StackPanel - это просто такой контейнер, куда можно складывать другие контролы. Он будет сам по себе адаптироваться под то количество контролов, которое ты положишь в него
            Заметь, я добавил еще одну строку в главный грид, и стек панель пошла во вторую строку, так что нижняя строка занимает 30 пикселей, а верхняя (со списком) - все оставшееся место (звездочка)
        -->
        <StackPanel Grid.Row="1">
            <!-- 
                Это простая кнопка. Умеет нажиматься, блокироваться и показывать всякое в себе. Теоретически в свойство Контент можно запихнуть даже видео, 
                но на практике там обычно текст и иногда картинка.
                Команда OnReadDataCommand - это обработчик нажатия кнопки, но сделан не напрямую а через Биндинг, то есть снова логика нажатия кнопки не привязана жестко к самой кнопке 
                сама команда должна быть во ViewModel, там же, где и биндинги данных (FileDirViewModel.cs). Идем смотреть вью модель!
            -->
            <Button Content="Кнопка по которой надо вычитывать данные" Margin="10,0,10,0" Command="{Binding OnReadDataCommand}" />
            <Button Content="Кнопка по которой надо все чистить" Margin="10,10,10,0" Command="{Binding OnCleanDataCommand}" />
        </StackPanel>
    </Grid>
</Window>
